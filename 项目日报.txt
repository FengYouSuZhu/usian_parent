2020/06/01 星期一
    缓存首页内容
    【需求分析：】
    查询商品分类时添加缓存：
        1、查询数据库之前先查询缓存。
        2、查询到结果，直接响应结果。
        3、查询不到，缓存中没有需要查询数据库。
        4、把查询结果添加到缓存中。
        5、返回结果。

    一、缓存商品分类菜单
        操作步骤：
        a、修改application.yml 配置连接数据
        b、修改ItemCategoryServiceImpl 书写具体逻辑
        c、测试
    二、缓存首页大广告位信息
        a、修改application.yml 配置连接数据
        b、修改ItemCategoryServiceImpl 书写具体逻辑
        c、测试
    三、缓存同步
        原理：
            对首页大广告做增删改操作后只需要把对应缓存删除即可。
----------------------------------------------------------------------------------------------
2020/06/02 星期二
    ElasticSearch
    一、ElasticSearch介绍与为什么要使用它？
        ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。
        根据DB-Engines的排名显示，ElasticSearch是最受欢迎的企业搜索引擎
    二、原理与应用
        正排索引：查字典时从第一页开始找，直到找到关键字为止（CTRL+F）
        	 倒排索引：查字典时通过目录查找
        	 逻辑结构：一个倒排索引表，由三部分组成
        		document
        		term
        		term----关联----document
    三、ES安装
        a、安装
            1、设置虚拟机内存>1.5G
            2、创建用户
            3、安装
                解压即安装
                配置elasticsearch.yml
            4、解决内核问题
            5、解决文件创建权限问题
            6、决绝线程开启限制问题
            7、解决虚拟机内存问题

        b、启动和关闭
            启动：
                ./bin/elasticsearch
                ./elasticsearch -d

            关闭：
                kill -9 pid
    四、ES快速入门
        1、index管理
        	a、创建index
        		PUT /java1906
        		{
        		   "settings"{
        			"number_of_shards":2,
        			"number_of_replicas":0 #备份分配不允许和主分片在同一个节点上
        		   }
        		}

        	b、修改index
        		PUT /java1906/_settings
        		{
        		  "number_of_replicas":1 #主分片不能修改【hash(doc_id)%number_of_shards=shard】
        		}

        	c、删除index
        		DELETE /java1906
         2、mapping管理
        	a、关键mapping
        		POST /java1906/course/_mapping
        		{
        			"properties":{
        				"name":{
        					"type":"text"
        				}
        			}
        		}

        	b、查询mapping
        		GET /java1906/couse/_mapping

          3、doucument管理
        	a、创建doucment
        		POST /java1907/couse/1
        		{
        			"name":"php从入门到放弃"
        		}
        		POST /java1907/couse
        		{
        			"name":"php从入门到放弃"
        		}
        		PUT /java1907/couse/1
        		{
        			"name":"php从入门到放弃"
        		}
        	b、查询doucument
        		GET /java1906/couse/1

        	c、删除document
        		DELETE /java1906/couse/1
    五、IK分词器
       1、安装
    	解压到plugs目录下，并重命名为ik

        2、自定义词库
    	IkAnalyzer.cfg.xml：配置扩展词典和停用词典
    	main.dic：扩展词典
    	stopwords.dic：停用词典

        3、两种分词模式
    	ik_smart：粗粒度拆分
    	ik_max_word：细粒度拆分
    六、field详细介绍
    	  a、field的属性
    		type：field的类型
    		analyzer：分词模式、ik_smart、ik_max_word
    		index：创建doucument和分词列表
    		field索引不存储：
    			"_source":{
    				"excludes":{"description"}
    			}

    	  b、常用的field类型
    		文本字段：
    			text
    		关键字字段：索引时不分词
    			keyword
    		日期字段：
    			date
    		数字字段
    			long、integer、double、float


    	d、field属性设置的标准

    					标准

    		分词                  是否有意义
    		索引                  是否搜索
    		存储                  是否展示
----------------------------------------------------------------------------------------------
2020/06/03 星期三
    一、springboot整合ES
         a、整合步骤
            1、pom.xml
                elasticsearch、elasticsearch-rest-high-level-client

            2、application.yml
                spring:
                  data:
                    elasticsearch:
                      cluster-nodes: 192.168.233.134:9200
            3、config
                @Configuration
                public class ElasticsearchConfig extends ElasticsearchProperties{

                    @Bean
                    public RestHighLevelClient getRestHighLevelClient() {
                    String[] hosts = getClusterNodes().split(",");
                    HttpHost[] httpHosts = new HttpHost[hosts.length];
                    for (int i = 0; i < httpHosts.length; i++) {
                        String h = hosts[i];
                        httpHosts[i] = new HttpHost(h.split(":")[0],
                                    Integer.parseInt(h.split(":")[1]));
                    }
                        return new RestHighLevelClient(RestClient.builder(httpHosts));
                    }
                }

         b、删除索引库
            DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest("java1906");
            restHighLevelClient.indices().delete(deleteIndexRequest,RequestOptions.DEFAULT);

         c、创建索引库
            CreateIndexRequest createIndexRequest = new CreateIndexRequest("java1906");
            createIndexRequest.settings("");
            createIndexRequest.mapping("");
            restHighLevelClient.indices().create(createIndexRequest,RequestOptions.DEFAULT)

         d、	添加文档
            IndexRequest indexRequest = new IndexRequest("java1906", "course", "1");
            indexRequest.source();
            restHighLevelClient.index(indexRequest,RequestOptions.DEFAULT);

         e、批量添加文档
            BulkRequest bulkRequest = new BulkRequest();
            bulkRequest.add(new IndexRequest("java1906", "course", "1").source(""));
            bulkRequest.add(new IndexRequest("java1906", "course", "1").source(""));
            restHighLevelClient.bulk(bulkRequest,RequestOptions.DEFAULT);

         f、	修改文档
            UpdateRequest updateRequest = new UpdateRequest("java1906", "course", "1");
            indexRequest.doc("");
            restHighLevelClient.update(indexRequest,RequestOptions.DEFAULT);

         g、	删除文档
            DeleteRequest deleteRequest = new DeleteRequest("java1906", "course", "1");
            restHighLevelClient.delete(deleteRequest,RequestOptions.DEFAULT);

         h、简单搜索
            GetRequest getRequest = new GetRequest("java1906", "course", "1");
            restHighLevelClient.get(getRequest,RequestOptions.DEFAULT);

         i、dsl搜索
            1、match_all
                SearchRequest searchRequest = new SearchRequest("java1906");
                searchRequest.types("course");

                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
                searchSourceBuilder.query(QueryBuilders.matchAllQuery());

                searchRequest.search(searchSourceBuilder)
                restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);

             2、分页查询
                SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder();
                searchSourceBuilder.query(QueryBuilders.matchAllQuery());
                searchSourceBuilder.form(1);
                searchSourceBuilder.size(2);
                searchSourceBuilder.sort("price",SortOrder.DESC);


























